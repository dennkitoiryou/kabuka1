{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "200707作成 rightGBM　git用　201906_202006SPD解析 re-edit 2  ",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1er8IZJBbX7K6qvDZIBvPxENpshtWI_aa",
      "authorship_tag": "ABX9TyPXfUg9Frkdx4ES375eykxg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dennkitotaichi/kabuka1/blob/master/200707%E4%BD%9C%E6%88%90_rightGBM%E3%80%80git%E7%94%A8\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rfHyIpW499eT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "11e6d8c0-bb79-4079-c210-4f4a505e8bb2"
      },
      "source": [
        "#you can start again from here!!!\n",
        "\n",
        "import codecs\n",
        "import pandas as pd\n",
        "with codecs.open(r\"/content/drive/My Drive/SPD_test/df_h2_d.csv\", \"r\", \"Shift-JIS\", \"ignore\") as file:\n",
        "    df_h2_d = pd.read_table(file, delimiter=\",\")\n",
        "    print(df_h2_d)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "         day1  count\n",
            "0    2019/6/3    0.0\n",
            "1    2019/6/4    0.0\n",
            "2    2019/6/5    0.0\n",
            "3    2019/6/6    0.0\n",
            "4    2019/6/7    0.0\n",
            "..        ...    ...\n",
            "216  2020/6/2    0.0\n",
            "217  2020/6/3    0.0\n",
            "218  2020/6/4    0.0\n",
            "219  2020/6/5    0.0\n",
            "220  2020/6/8    0.0\n",
            "\n",
            "[221 rows x 2 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xl4frMzGKrSm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import codecs\n",
        "import pandas as pd\n",
        "with codecs.open(r\"/content/drive/My Drive/SPD_test/kanngo202006.csv\", \"r\", \"Shift-JIS\", \"ignore\") as file:\n",
        "    df = pd.read_table(file, delimiter=\",\")\n",
        "    #print(df)\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tdMyVJdoE3PV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "df_new = df.rename(columns={'Unnamed: 0': 'day1'})\n",
        "#print(df_new)\n",
        "\n",
        "df_new2 = df_new.drop(columns=['Unnamed: 1'])\n",
        "\n",
        "\n",
        "df_m = pd.merge(df_h2_d, df_new2, on='day1')\n",
        "#print(df_m)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hvO104201uuK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "a7797e76-e1fe-4c3d-fef0-07ce364c3a86"
      },
      "source": [
        "import pandas as pd\n",
        "dt = df_m\n",
        "#print(dt)\n",
        "df = pd.DataFrame(df_m)\n",
        "#print(df)\n",
        "#print(df.columns)\n",
        "#print(df.columns[[0]])\n",
        "#print(df.drop(df.columns[[0]], axis=1))\n",
        "dtt=df.drop(df.columns[[0]], axis=1)\n",
        "import numpy as np\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "sns.set()\n",
        "import collections\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from keras.models import Sequential\n",
        "from keras import layers\n",
        "from keras.utils.np_utils import to_categorical\n",
        "from keras.wrappers.scikit_learn import KerasClassifier\n",
        "from keras import regularizers\n",
        "import xgboost as xgb\n",
        "import warnings\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from sklearn import preprocessing\n",
        "from keras.models import Sequential\n",
        "from keras.layers.core import Dense, Activation\n",
        "from keras.layers.recurrent import LSTM\n",
        "from keras.optimizers import RMSprop\n",
        "from keras.optimizers import Adam\n",
        "from keras.callbacks import EarlyStopping\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from tensorflow.keras.metrics import Precision, Recall\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "import random\n",
        "\n",
        "from pandas.plotting import scatter_matrix\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n",
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4hjYfcemKrMr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "92cf64df-ad6b-413b-9465-1c8ccfdff740"
      },
      "source": [
        "df.info()\n",
        "dfs = df[df['count'] != 0]\n",
        "df1 = dfs.reset_index()\n",
        "#df1.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 221 entries, 0 to 220\n",
            "Columns: 122 entries, day1 to 救命等に係る内科治療.5\n",
            "dtypes: float64(81), int64(40), object(1)\n",
            "memory usage: 212.4+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HKoPhm5bhijx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df.tail()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1snENbSPhjSZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "outputId": "219b0420-d3dd-476a-b6ee-abb0575a58f6"
      },
      "source": [
        "#df1=df.drop(range(216,221))\n",
        "df1=df\n",
        "#print(df1)\n",
        "#列を取り出す方法How to retrieve columns\n",
        "df2 = df1.iloc[:, 1]\n",
        "print(df2)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0      0.0\n",
            "1      0.0\n",
            "2      0.0\n",
            "3      0.0\n",
            "4      0.0\n",
            "      ... \n",
            "216    0.0\n",
            "217    0.0\n",
            "218    0.0\n",
            "219    0.0\n",
            "220    0.0\n",
            "Name: count, Length: 221, dtype: float64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "quzZ0-Rqhlo4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "8882ef82-25ac-43a1-92c8-46a0241be325"
      },
      "source": [
        "droped_df_X_indate = df1.drop(range(216,221))\n",
        "#droped_df_X = droped_df_X_indate.drop(\"send_date\", axis=1)\n",
        "#↑カラム名を指定して列を削除する方法 How to delete a column by specifying the column name\n",
        "#↓名前の代わりに列の整数を使って削除する方法  How to delete using column integer instead of name\n",
        "droped_df_X = droped_df_X_indate.drop(droped_df_X_indate.columns[[1]], axis='columns')\n",
        "#↓product_totalが0の行を削除する Delete the line where product_total is 0\n",
        "#droped_df_X = droped_df_X1[droped_df_X1['product_total'] != 0]\n",
        "\n",
        "#print(droped_df_X)\n",
        "print(\"-------------------------------------------------\")\n",
        "\n",
        "droped_df_Y1 = df1.drop(range(0,5))\n",
        "\n",
        "droped_df_Y = droped_df_Y1['count']\n",
        "\n",
        "print(droped_df_Y)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "-------------------------------------------------\n",
            "5      0.0\n",
            "6      0.0\n",
            "7      0.0\n",
            "8      0.0\n",
            "9      0.0\n",
            "      ... \n",
            "216    0.0\n",
            "217    0.0\n",
            "218    0.0\n",
            "219    0.0\n",
            "220    0.0\n",
            "Name: count, Length: 216, dtype: float64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wRNjCey2h0qI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "8bE5uwk4flhE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "bc6990c9-ce6a-4ce0-cb99-fb4002a73778"
      },
      "source": [
        "from sklearn import linear_model\n",
        "clf = linear_model.LinearRegression()\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import svm  \n",
        "from sklearn.metrics import accuracy_score\n",
        "import lightgbm as lgb\n",
        "from sklearn.metrics import r2_score\n",
        "print(\"------------------------------------------------------------\")\n",
        "\n",
        "#5_days_predict\n",
        "print(dt.describe())\n",
        "\n",
        "print(\"------------------------------------------------------------\")\n",
        "\n",
        "#説明変数入力用 For inputting explanatory variables I devised a method that can get here with a small amount of source code.\n",
        "def Create_Description_X(df):\n",
        " train_data = dt.values\n",
        " X = train_data[:, 2:] # 3列目以降の変数  Variables from the third column\n",
        " y  = train_data[:, 1]  # 正解データを2列目に置きましたそしてyとしました I put the correct answer data in the second column and say y\n",
        "\n",
        " \n",
        " #説明変数作成 Create explanatory variables\n",
        "\n",
        " print(\"X.shape\",X.shape)\n",
        " return X\n",
        "\n",
        "#説明変数Create_Description_X実施これでXに値が入るはず\n",
        "X = Create_Description_X(dt)\n",
        "print(\"Create_Description_X 後の X.shape\",X.shape)\n",
        "\n",
        "#目的変数入力用関数 Function for inputting objective variable\n",
        "def Objective_variable_creationY(Ymoto):\n",
        " targek = Ymoto\n",
        " Y=targek.T\n",
        " return Y\n",
        "\n",
        "#目的変数作成  Create target variable\n",
        "targetk = dt['count'].values\n",
        "#目的変数作成関数利用  Use objective variable creation function\n",
        "Y = Objective_variable_creationY(targetk)\n",
        "\n",
        "print(\"Objective_variable_creationY 後の Y.shape\",Y.shape)\n",
        "\n",
        "# 訓練用のデータと、テスト用のデータに分ける関数 Function that divides into training data and test data\n",
        "def Test_data_and_training_data_split(df,X,Y):\n",
        " N_train = int(len(df) * 0.60)\n",
        " N_test = len(df) - N_train\n",
        " X_train, X_test, y_train, y_test = \\\n",
        "    train_test_split(X, Y, test_size=N_test,shuffle=False) \n",
        " return X_train, X_test, y_train, y_test\n",
        "\n",
        "# 訓練用のデータと、テスト用のデータに分ける関数実行 Function execution divided into training data and test data\n",
        "X_train, X_test, y_train, y_test = Test_data_and_training_data_split(df,X,Y)\n",
        "\n",
        "print(\"X_train\",X_train.shape)\n",
        "print(\"Y_train\",y_train.shape)\n",
        "print(\"X_test\",X_test.shape)\n",
        "print(\"Y_test\",y_test.shape)\n",
        "\n",
        "print(\"------------------------------------------------------------\")\n",
        "\n",
        "print(\"ここから特徴量評価------------------------------------------------------------\")\n",
        "\n",
        "#light GBM関数 light GBM function\n",
        "def Test_lightgbm(X_train, X_test, y_train, y_test):\n",
        " import lightgbm as lgb\n",
        " # データを格納する Store data\n",
        " lgb_train = lgb.Dataset(X_train, y_train)\n",
        " lgb_eval = lgb.Dataset(X_test, y_test, reference=lgb_train)\n",
        " # 学習条件を設定 Set learning conditions\n",
        " params = {'task': 'train',\n",
        "          'metric':{'l2'},\n",
        "          'boosting_type': 'gbdt',\n",
        "          'learning_rate': 0.02,\n",
        "          'num_leaves': 23,\n",
        "          'min_data_in_leaf': 1,\n",
        "          'num_iteration': 1000,\n",
        "          'verbose': 0,\n",
        "          }\n",
        "\n",
        " # 学習する learn\n",
        " model = lgb.train(params,\n",
        "                  lgb_train,\n",
        "                  num_boost_round=50,\n",
        "                  valid_sets=lgb_eval,\n",
        "                  early_stopping_rounds=100)\n",
        "\n",
        " # テストデータで予測する Predict with test data\n",
        " y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n",
        " y_pred_max = np.argmax(y_pred)\n",
        "\n",
        " # Accuracy を計算する Calculate accuracy\n",
        " accuracy = sum(y_test == y_pred_max) / len(y_test)\n",
        " print('accuracy:', accuracy)\n",
        " \n",
        " # importanceを表示する display importance\n",
        " importance = pd.DataFrame(model.feature_importance(), columns=['importance'])\n",
        " display(importance)\n",
        " #np.set_printoptions(threshold=np.inf)\n",
        " #print(importance)\n",
        " # テストデータによる予測,lightgbmでX_testを予想：predictした値をY_predとする\n",
        " #Prediction by test data, predicting X_test with lightgbm: Let predicted value be Y_pred\n",
        " df_corr = importance\n",
        " from google.colab import files\n",
        " writer = pd.ExcelWriter('importance.xlsx')\n",
        " df_corr.to_excel(writer)\n",
        " writer.save()\n",
        " files.download('importance.xlsx')\n",
        "\n",
        "\n",
        " Y_pred = model.predict(X_test)\n",
        " return Y_pred\n",
        "\n",
        "#Test_lightgbm関数の実施 Execution of Test_lightgbm function\n",
        "Y_pred = Test_lightgbm(X_train, X_test, y_train, y_test)\n",
        "\n",
        "\n",
        "\n",
        "print(\"ここまで特徴量評価------------------------------------------------------------\")\n",
        "\n",
        "# テスト結果を評価する,Test_result()関数 Evaluate test results, Test_result() function\n",
        "def Test_result(Y_pred, y_test):\n",
        " from sklearn.model_selection import cross_val_score\n",
        " from sklearn.linear_model import LogisticRegression\n",
        " from sklearn import svm  \n",
        " from sklearn.metrics import accuracy_score\n",
        " import lightgbm as lgb\n",
        " from sklearn.metrics import r2_score\n",
        " print(\"light GBM\") \n",
        " # テスト結果を評価する,accuracy_score()\n",
        " #print(\"予測対象X：\", y_test, \", 予測結果→\", Y_pred)\n",
        " from sklearn.metrics import mean_absolute_error\n",
        " print(\"平均絶対誤差 (MAE, Mean Absolute Error\") \n",
        " print(mean_absolute_error(y_test, Y_pred))\n",
        " ## RMSEの計算 RMSE calculation\n",
        " print(\"二乗平均平方根誤差（RMSE）\")\n",
        " print(np.sqrt(mean_squared_error(y_test,Y_pred)))\n",
        " ## test_r2_score計算 test_r2_score calculation\n",
        " test_r2_score = r2_score(y_test,Y_pred)\n",
        " print(\"test_r2_score\")\n",
        " print(test_r2_score)\n",
        " ## 予測結果をプロット Plot prediction results\n",
        " pre_date = df.index[-len(y_test):].values\n",
        " plt.title(\"Test_result\")\n",
        " plt.plot(pre_date, y_test, 'b', alpha=0.6, marker='.', label=\"Actual value\", linewidth=1)\n",
        " plt.plot(pre_date, Y_pred, 'r', alpha=0.6, marker='.', label=\"prediction value\", linewidth=1)\n",
        " plt.xticks(rotation=70)\n",
        " plt.legend()\n",
        " plt.grid(True)\n",
        " plt.show()\n",
        "\n",
        " test_r2_score1 = test_r2_score\n",
        " test_r2_score2 = test_r2_score1.astype(\"float16\")\n",
        " Y_pred2 = Y_pred.astype(\"int\")\n",
        " df_cor = pd.DataFrame({'test_r2_score': [test_r2_score2],\n",
        "                   '平均絶対誤差 (MAE, Mean Absolute Error': [mean_absolute_error(y_test, Y_pred)],\n",
        "                   '二乗平均平方根誤差（RMSE）': [mean_absolute_error(y_test, Y_pred)],\n",
        "                   'Y_pred': [Y_pred2[0], Y_pred2[1], Y_pred2[2], Y_pred2[3], Y_pred2[4],Y_pred2[5]]},index=['1_day_later', '2_day_later', '3_day_later', '4_day_later', '5_day_later','6_day_later'])\n",
        "                    \n",
        "\n",
        " #pandasにしないと以下が実行できない The following cannot be executed unless it is pandas\n",
        "\n",
        " from google.colab import files\n",
        " writer = pd.ExcelWriter('test_r2_score.xlsx')\n",
        " df_cor.to_excel(writer)\n",
        " writer.save()\n",
        " files.download('test_r2_score.xlsx')\n",
        "\n",
        " print(\"test_r2_score2\")\n",
        " print(test_r2_score2)\n",
        "\n",
        "\n",
        "#整数に直してから評価する Evaluate after converting to an integer\n",
        "Y_pred2 = Y_pred.astype(\"int\")\n",
        "\n",
        "#Test_result関数の実施 Execution of Test_result function\n",
        "Test_result(Y_pred2, y_test)\n",
        "\n",
        "\n",
        "print(\"他のモデルでも評価------------------------------------------------------------\")\n",
        "\n",
        "\n",
        "#決定木関数の作成 Create decision tree function\n",
        "def sklearn_tree_test_result(X_train, X_test, y_train, y_test):\n",
        " from sklearn.tree import DecisionTreeClassifier \n",
        " dt = DecisionTreeClassifier()\n",
        " dt.fit(X_train,y_train)\n",
        " y_pred = dt.predict(X_test)\n",
        " #整数に直してから評価する Evaluate after converting to an integer\n",
        " y_pred2 = y_pred.astype(\"int\")\n",
        " #print(\"決定木accuracy_score : {}\".format(accuracy_score(y_test,y_pred)))\n",
        " print(\"決定木 sklearn_tree\") \n",
        " ## 平均絶対誤差の計算 Calculate mean absolute error\n",
        " from sklearn.metrics import mean_absolute_error\n",
        " print(\"平均絶対誤差 (MAE, Mean Absolute Error\") \n",
        " print(mean_absolute_error(y_test, y_pred2))\n",
        " ## RMSEの計算 calculation\n",
        " print(\"二乗平均平方根誤差（RMSE）\")\n",
        " print(np.sqrt(mean_squared_error(y_test,y_pred2)))\n",
        " ## test_r2_score計算 calculation\n",
        " test_r2_score = r2_score(y_test,y_pred2)\n",
        " print(\"test_r2_score\")\n",
        " print(test_r2_score)\n",
        " ## 予測結果をプロット Plot prediction results\n",
        " pre_date = df.index[-len(y_test):].values\n",
        " plt.title(\"Test_result\")\n",
        " plt.plot(pre_date, y_test, 'b', alpha=0.6, marker='.', label=\"Actual value\", linewidth=1)\n",
        " plt.plot(pre_date, y_pred2, 'r', alpha=0.6, marker='.', label=\"prediction value\", linewidth=1)\n",
        " plt.xticks(rotation=70)\n",
        " plt.legend()\n",
        " plt.grid(True)\n",
        " plt.show()\n",
        "\n",
        "\n",
        "#決定木関数の実行 Execute decision tree function\n",
        "sklearn_tree_test_result(X_train, X_test, y_train, y_test)\n",
        "\n",
        "print(\"他のモデルでも評価------------------------------------------------------------\")\n",
        " \n",
        "#ランダムフォレスト関数の作成 Create Random Forest Function\n",
        "def RandomForestClassifier_test_result(X_train, X_test, y_train, y_test):\n",
        " from sklearn.ensemble import RandomForestClassifier\n",
        " rf = RandomForestClassifier()\n",
        " rf.fit(X_train,y_train)\n",
        " y_pred_pre = rf.predict(X_test)\n",
        " #整数に変換  Evaluate after converting to an integer\n",
        " y_pred = y_pred_pre.astype(\"int\")\n",
        " print(\"RandomForestClassifier\")\n",
        " ## 平均絶対誤差の計算 Calculate mean absolute error\n",
        " from sklearn.metrics import mean_absolute_error\n",
        " print(\"平均絶対誤差 (MAE, Mean Absolute Error\") \n",
        " print(mean_absolute_error(y_test, y_pred))\n",
        " ## RMSEの計算 calculation\n",
        " print(\"二乗平均平方根誤差（RMSE）\")\n",
        " print(np.sqrt(mean_squared_error(y_test,y_pred)))\n",
        " ## test_r2_score計算 calculation\n",
        " test_r2_score = r2_score(y_test,y_pred)\n",
        " print(\"test_r2_score\")\n",
        " print(test_r2_score)\n",
        " ## 予測結果をプロット Plot prediction results\n",
        " pre_date = df.index[-len(y_test):].values\n",
        " plt.title(\"Test_result\")\n",
        " plt.plot(pre_date, y_test, 'b', alpha=0.6, marker='.', label=\"Actual value\", linewidth=1)\n",
        " plt.plot(pre_date, y_pred, 'r', alpha=0.6, marker='.', label=\"prediction value\", linewidth=1)\n",
        " plt.xticks(rotation=70)\n",
        " plt.legend()\n",
        " plt.grid(True)\n",
        " plt.show()\n",
        "\n",
        "#ランダムフォレスト関数の実行 Execute  Random Forest Function\n",
        "RandomForestClassifier_test_result(X_train, X_test, y_train, y_test)\n",
        "\n",
        "print(\"他のモデルでも評価------------------------------------------------------------\")\n",
        "\n",
        "#XGBoost関数の作成 Create XGBoost Function\n",
        "def XGBoost_test_result(X_train, X_test, y_train, y_test):\n",
        " import xgboost as xgb\n",
        " from xgboost import XGBClassifier\n",
        " xgb = xgb.XGBClassifier(booster=\"gbtree\",silent=0,seed=2019)\n",
        " xgb.fit(X_train,y_train)\n",
        " y_pred_pre = xgb.predict(X_test)\n",
        " #整数に変換 Evaluate after converting to an integer\n",
        " y_pred = y_pred_pre.astype(\"int\")\n",
        " print(\"XGBoost accuracy_score\")\n",
        " ## 平均絶対誤差の計算 Calculate mean absolute error\n",
        " from sklearn.metrics import mean_absolute_error\n",
        " print(\"平均絶対誤差 (MAE, Mean Absolute Error\") \n",
        " print(mean_absolute_error(y_test, y_pred))\n",
        " ## RMSEの計算 calculation\n",
        " print(\"二乗平均平方根誤差（RMSE）\")\n",
        " print(np.sqrt(mean_squared_error(y_test,y_pred)))\n",
        " ## test_r2_score計算 calculation\n",
        " test_r2_score = r2_score(y_test,y_pred)\n",
        " print(\"test_r2_score\")\n",
        " print(test_r2_score)\n",
        " ## 予測結果をプロット  Plot prediction results\n",
        " pre_date = df.index[-len(y_test):].values\n",
        " plt.title(\"Test_result\")\n",
        " plt.plot(pre_date, y_test, 'b', alpha=0.6, marker='.', label=\"Actual value\", linewidth=1)\n",
        " plt.plot(pre_date, y_pred, 'r', alpha=0.6, marker='.', label=\"prediction value\", linewidth=1)\n",
        " plt.xticks(rotation=70)\n",
        " plt.legend()\n",
        " plt.grid(True)\n",
        " plt.show()\n",
        "\n",
        "#Execute  XGBoost_test_result Function\n",
        "XGBoost_test_result(X_train, X_test, y_train, y_test)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "------------------------------------------------------------\n",
            "            count        評価総数  ...  上記以外の全麻脊麻手術.5  救命等に係る内科治療.5\n",
            "count  221.000000  221.000000  ...     221.000000         221.0\n",
            "mean     0.126697  118.692308  ...       1.678733           0.0\n",
            "std      0.333388   12.868403  ...       1.124500           0.0\n",
            "min      0.000000   84.000000  ...       0.000000           0.0\n",
            "25%      0.000000  112.000000  ...       1.000000           0.0\n",
            "50%      0.000000  118.000000  ...       2.000000           0.0\n",
            "75%      0.000000  126.000000  ...       2.000000           0.0\n",
            "max      1.000000  161.000000  ...       6.000000           0.0\n",
            "\n",
            "[8 rows x 121 columns]\n",
            "------------------------------------------------------------\n",
            "X.shape (221, 120)\n",
            "Create_Description_X 後の X.shape (221, 120)\n",
            "Objective_variable_creationY 後の Y.shape (221,)\n",
            "X_train (132, 120)\n",
            "Y_train (132,)\n",
            "X_test (89, 120)\n",
            "Y_test (89,)\n",
            "------------------------------------------------------------\n",
            "ここから特徴量評価------------------------------------------------------------\n",
            "[1]\tvalid_0's l2: 0.10814\n",
            "Training until validation scores don't improve for 100 rounds.\n",
            "[2]\tvalid_0's l2: 0.108216\n",
            "[3]\tvalid_0's l2: 0.108557\n",
            "[4]\tvalid_0's l2: 0.109148\n",
            "[5]\tvalid_0's l2: 0.109975\n",
            "[6]\tvalid_0's l2: 0.111021\n",
            "[7]\tvalid_0's l2: 0.112274\n",
            "[8]\tvalid_0's l2: 0.11372\n",
            "[9]\tvalid_0's l2: 0.115347\n",
            "[10]\tvalid_0's l2: 0.117143\n",
            "[11]\tvalid_0's l2: 0.119097\n",
            "[12]\tvalid_0's l2: 0.121197\n",
            "[13]\tvalid_0's l2: 0.123434\n",
            "[14]\tvalid_0's l2: 0.125797\n",
            "[15]\tvalid_0's l2: 0.128278\n",
            "[16]\tvalid_0's l2: 0.130867\n",
            "[17]\tvalid_0's l2: 0.133556\n",
            "[18]\tvalid_0's l2: 0.136338\n",
            "[19]\tvalid_0's l2: 0.139203\n",
            "[20]\tvalid_0's l2: 0.142146\n",
            "[21]\tvalid_0's l2: 0.145159\n",
            "[22]\tvalid_0's l2: 0.148236\n",
            "[23]\tvalid_0's l2: 0.151371\n",
            "[24]\tvalid_0's l2: 0.154557\n",
            "[25]\tvalid_0's l2: 0.15779\n",
            "[26]\tvalid_0's l2: 0.161063\n",
            "[27]\tvalid_0's l2: 0.164372\n",
            "[28]\tvalid_0's l2: 0.167713\n",
            "[29]\tvalid_0's l2: 0.17108\n",
            "[30]\tvalid_0's l2: 0.174469\n",
            "[31]\tvalid_0's l2: 0.177877\n",
            "[32]\tvalid_0's l2: 0.1813\n",
            "[33]\tvalid_0's l2: 0.184734\n",
            "[34]\tvalid_0's l2: 0.188175\n",
            "[35]\tvalid_0's l2: 0.191621\n",
            "[36]\tvalid_0's l2: 0.195069\n",
            "[37]\tvalid_0's l2: 0.198515\n",
            "[38]\tvalid_0's l2: 0.201957\n",
            "[39]\tvalid_0's l2: 0.205393\n",
            "[40]\tvalid_0's l2: 0.20882\n",
            "[41]\tvalid_0's l2: 0.212237\n",
            "[42]\tvalid_0's l2: 0.21564\n",
            "[43]\tvalid_0's l2: 0.219028\n",
            "[44]\tvalid_0's l2: 0.222399\n",
            "[45]\tvalid_0's l2: 0.225752\n",
            "[46]\tvalid_0's l2: 0.229085\n",
            "[47]\tvalid_0's l2: 0.232396\n",
            "[48]\tvalid_0's l2: 0.235685\n",
            "[49]\tvalid_0's l2: 0.238949\n",
            "[50]\tvalid_0's l2: 0.242189\n",
            "[51]\tvalid_0's l2: 0.245402\n",
            "[52]\tvalid_0's l2: 0.248587\n",
            "[53]\tvalid_0's l2: 0.251744\n",
            "[54]\tvalid_0's l2: 0.254872\n",
            "[55]\tvalid_0's l2: 0.257971\n",
            "[56]\tvalid_0's l2: 0.261038\n",
            "[57]\tvalid_0's l2: 0.264075\n",
            "[58]\tvalid_0's l2: 0.26708\n",
            "[59]\tvalid_0's l2: 0.270052\n",
            "[60]\tvalid_0's l2: 0.272992\n",
            "[61]\tvalid_0's l2: 0.275899\n",
            "[62]\tvalid_0's l2: 0.278772\n",
            "[63]\tvalid_0's l2: 0.281611\n",
            "[64]\tvalid_0's l2: 0.284416\n",
            "[65]\tvalid_0's l2: 0.287187\n",
            "[66]\tvalid_0's l2: 0.289924\n",
            "[67]\tvalid_0's l2: 0.292626\n",
            "[68]\tvalid_0's l2: 0.295293\n",
            "[69]\tvalid_0's l2: 0.297926\n",
            "[70]\tvalid_0's l2: 0.300523\n",
            "[71]\tvalid_0's l2: 0.303086\n",
            "[72]\tvalid_0's l2: 0.305614\n",
            "[73]\tvalid_0's l2: 0.308108\n",
            "[74]\tvalid_0's l2: 0.310566\n",
            "[75]\tvalid_0's l2: 0.31299\n",
            "[76]\tvalid_0's l2: 0.31538\n",
            "[77]\tvalid_0's l2: 0.317735\n",
            "[78]\tvalid_0's l2: 0.320056\n",
            "[79]\tvalid_0's l2: 0.322343\n",
            "[80]\tvalid_0's l2: 0.324596\n",
            "[81]\tvalid_0's l2: 0.326815\n",
            "[82]\tvalid_0's l2: 0.329001\n",
            "[83]\tvalid_0's l2: 0.331154\n",
            "[84]\tvalid_0's l2: 0.333274\n",
            "[85]\tvalid_0's l2: 0.335362\n",
            "[86]\tvalid_0's l2: 0.337416\n",
            "[87]\tvalid_0's l2: 0.339439\n",
            "[88]\tvalid_0's l2: 0.34143\n",
            "[89]\tvalid_0's l2: 0.34339\n",
            "[90]\tvalid_0's l2: 0.345318\n",
            "[91]\tvalid_0's l2: 0.347215\n",
            "[92]\tvalid_0's l2: 0.349082\n",
            "[93]\tvalid_0's l2: 0.350918\n",
            "[94]\tvalid_0's l2: 0.352724\n",
            "[95]\tvalid_0's l2: 0.354501\n",
            "[96]\tvalid_0's l2: 0.356249\n",
            "[97]\tvalid_0's l2: 0.357967\n",
            "[98]\tvalid_0's l2: 0.359657\n",
            "[99]\tvalid_0's l2: 0.361319\n",
            "[100]\tvalid_0's l2: 0.362952\n",
            "[101]\tvalid_0's l2: 0.364558\n",
            "Early stopping, best iteration is:\n",
            "[1]\tvalid_0's l2: 0.10814\n",
            "accuracy: 0.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/lightgbm/engine.py:118: UserWarning: Found `num_iteration` in params. Will use it instead of argument\n",
            "  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>importance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>117</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>119</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>120 rows × 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     importance\n",
              "0             3\n",
              "1             1\n",
              "2             1\n",
              "3             1\n",
              "4             0\n",
              "..          ...\n",
              "115           0\n",
              "116           0\n",
              "117           0\n",
              "118           0\n",
              "119           0\n",
              "\n",
              "[120 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_22be5bb2-7761-4e83-a5c4-dfd33aed3a4b\", \"importance.xlsx\", 6248)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "ここまで特徴量評価------------------------------------------------------------\n",
            "light GBM\n",
            "平均絶対誤差 (MAE, Mean Absolute Error\n",
            "0.12359550561797752\n",
            "二乗平均平方根誤差（RMSE）\n",
            "0.3515615246553262\n",
            "test_r2_score\n",
            "-0.14102564102564097\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_2a278519-22df-473a-af25-e97bd51eda94\", \"test_r2_score.xlsx\", 5240)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "test_r2_score2\n",
            "-0.141\n",
            "他のモデルでも評価------------------------------------------------------------\n",
            "決定木 sklearn_tree\n",
            "平均絶対誤差 (MAE, Mean Absolute Error\n",
            "0.34831460674157305\n",
            "二乗平均平方根誤差（RMSE）\n",
            "0.5901818420974785\n",
            "test_r2_score\n",
            "-2.2156177156177153\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "他のモデルでも評価------------------------------------------------------------\n",
            "RandomForestClassifier\n",
            "平均絶対誤差 (MAE, Mean Absolute Error\n",
            "0.12359550561797752\n",
            "二乗平均平方根誤差（RMSE）\n",
            "0.3515615246553262\n",
            "test_r2_score\n",
            "-0.14102564102564097\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "他のモデルでも評価------------------------------------------------------------\n",
            "XGBoost accuracy_score\n",
            "平均絶対誤差 (MAE, Mean Absolute Error\n",
            "0.16853932584269662\n",
            "二乗平均平方根誤差（RMSE）\n",
            "0.41053541362798\n",
            "test_r2_score\n",
            "-0.5559440559440558\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}